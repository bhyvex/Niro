.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MicroMason::Safe 3"
.TH MicroMason::Safe 3 "2007-01-30" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Text::MicroMason::Safe \- Compile all Templates in a Safe Compartment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Instead of using this class directly, pass its name to be mixed in:
.PP
.Vb 2
\&  use Text::MicroMason;
\&  my $mason = Text::MicroMason\->new( \-Safe );
.Ve
.PP
Use the standard compile and execute methods to parse and evalute templates:
.PP
.Vb 2
\&  print $mason\->compile( text=>$template )\->( @%args );
\&  print $mason\->execute( text=>$template, @args );
.Ve
.PP
Safe usage restricts templates from accessing your files or data:
.PP
.Vb 1
\&  print $mason\->execute( text=>"<% qx! cat /etc/passwd ! %>" ); # dies
.Ve
.PP
.Vb 1
\&  print $mason\->execute( text=>"The time is <% time() %>." ); # dies
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package adds support for Safe compartments to MicroMason, allowing 
you to  restrict the operations that a template can perform.
.PP
By default, these safe calls prevent the code in a template from performing
any system activity or accessing any of your other Perl code.  Violations
may result in either compile-time or run-time errors, so make sure you
are using an eval block or the CatchErrors trait to catch exceptions.
.PP
.Vb 2
\&  use Text::MicroMason;
\&  my $mason = Text::MicroMason\->new( \-Safe );
.Ve
.PP
.Vb 1
\&  $result = eval { $mason\->execute( text => $template ) };
.Ve
.PP
\&\fBCaution:\fR Although this appears to provide a significant amount of security for untrusted templates, please take this with a grain of salt. A bug in either this module or in the core Safe module could allow a clever attacker to defeat the protection. At least one bug in the Safe module has been found and fixed in years past, and there could be others. 
.Sh "Supported Attributes"
.IX Subsection "Supported Attributes"
.IP "safe" 4
.IX Item "safe"
Optional reference to a Safe compartment. If you do not provide this, one
is generated for you.
.Sp
To enable some operations or share variables or functions with the template
code, create a Safe compartment and configure it before passing it in as
the value of the \*(L"safe\*(R" attribute:
.Sp
.Vb 3
\&  $safe = Safe\->new();
\&  $safe\->permit(\(aqtime\(aq);
\&  $safe\->share(\(aq$foo\(aq);
.Ve
.Sp
.Vb 1
\&  $mason = Text::MicroMason\->new( \-Safe, safe => $safe );
.Ve
.Sp
.Vb 1
\&  $result = eval { $mason\->execute( text => $template ) };
.Ve
.IP "safe_methods" 4
.IX Item "safe_methods"
A space-separated string of methods names to be supported by the Safe::Facade.
.Sp
To control which Mason methods are available within the template, pass a
\&\f(CW\*(C`safe_methods\*(C'\fR argument to \fInew()\fR followed by the method names in a 
space-separated string.
.Sp
For example, to allow templates to include other templates, using \f(CW$m\fR\->execute
or the \*(L"<& file &>\*(R" include syntax, you would need to allow the execute
method. We'll also load the TemplateDir mixin with strict_root on to prevent
inclusion of templates from outside the current directory.
.Sp
.Vb 2
\&  $mason = Text::MicroMason\->new( \-Safe, safe_methods => \(aqexecute\(aq, 
\&                                  \-TemplateDir, strict_root => 1 );
.Ve
.Sp
If you're combining this with the Filters mixin, you'll also need to allow
calls to the filter method; to allow multiple methods, join their names
with spaces:
.Sp
.Vb 3
\&  $mason = Text::MicroMason\->new( \-Safe, safe_methods => \(aqexecute filter\(aq, 
\&                                  \-TemplateDir, strict_root => 1,
\&                                  \-Filters );
.Ve
.Sh "Private Methods"
.IX Subsection "Private Methods"
.IP "\fIeval_sub()\fR" 4
.IX Item "eval_sub()"
Instead of the \fIeval()\fR used by the base class, this calls \fIreval()\fR on a Safe
compartment.
.IP "\fIsafe_compartment()\fR" 4
.IX Item "safe_compartment()"
Returns the Safe compartment passed by the user or generates a new one.
.IP "\fIsafe_facade()\fR" 4
.IX Item "safe_facade()"
Generates an instance of the Safe::Facade equipped with only the methods
listed in the safe_methods attribute.
.Sh "Private Safe::Facade class"
.IX Subsection "Private Safe::Facade class"
Code compiled in a Safe compartment only has access to a limited version of
the template compiler in the \f(CW$m\fR variable, and can not make changes to the
attributes of the real MicroMason object. This limited object is an instance
of the Text::MicroMason::Safe::Facade class and can only perform certain
pre-defined methods.
.IP "\fInew()\fR" 4
.IX Item "new()"
Creates a new hash-based instance mapping method names to subroutine
references.
.IP "\fIfacade_method()\fR" 4
.IX Item "facade_method()"
Calls a named method by looking up the corresponding subroutine and calling
it.
.IP "\s-1\fIAUTOLOAD\s0()\fR" 4
.IX Item "AUTOLOAD()"
Generates wrapper methods that call the \fIfacade_method()\fR for any lowercase
method name.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For an overview of this templating framework, see Text::MicroMason.
.PP
This is a mixin class intended for use with Text::MicroMason::Base.
.PP
For distribution, installation, support, copyright and license 
information, see Text::MicroMason::Docs::ReadMe.
