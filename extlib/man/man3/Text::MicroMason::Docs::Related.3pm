.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MicroMason::Docs::Related 3"
.TH MicroMason::Docs::Related 3 "2007-01-30" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Text::MicroMason::Docs::Related \- A Brief Survey of Templating Modules 
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
Text::MicroMason is just one of dozens (or hundreds) of templating 
distributions on \s-1CPAN\s0. 
.PP
This document mentions a few related modules and includes a brief discussion of some similarities and differences among them.
.SH "OTHER COMPARISONS"
.IX Header "OTHER COMPARISONS"
For a more authoritative discussion, see Perrin Harkins' classic article at <http://www.perl.com/lpt/a/2001/08/21/templating.html>.
.PP
For reference, here's a slightly mangled version of the comparison matrix 
at the conclusion of that article:
.PP
.Vb 10
\&                 Scope          Style           Parsing         Language
\&  HTML::Mason    Framework      Callback        Compiled        Perl
\&  HTML::Embperl  Framework      Callback        Compiled        Perl
\&  Apache::ASP    Framework      Callback        Compiled        Perl and XSL
\&  AxKit          Framework      Pipeline        Compiled or     Perl, XSL and
\&                                                 Cached Parse    Mini\-Languages
\&  SSI            Templates      Callback        Repeated Parse  Mini\-Language
\&  Template Tlkit Templates      Pipeline        Compiled        Mini\-Language
\&  HTML::Template Templates      Pipeline        Cached Parse    Mini\-Language
\&  Text::Template Templates      Pipeline        Compiled        Perl
.Ve
.SH "POINTS OF COMPARISON"
.IX Header "POINTS OF COMPARISON"
There are serveral ways we can differentiate between templating systems:
.IP "Perl Syntax vs. Little Languages" 4
.IX Item "Perl Syntax vs. Little Languages"
Some templating systems use Perl syntax for both interpolated expressions
and flow control, including Text::Template,
Template::Perl, and Text::ScriptTemplate.
.Sp
Others use \*(L"little languages\*(R", including Template::Toolkit and HTML::Template.
.IP "Just Templating vs. Web Application Framework" 4
.IX Item "Just Templating vs. Web Application Framework"
Some templating systems just provide functions to fill in templates, like Text::Template.
.Sp
Others are part of full-blown web application frameworks like
Apache::ASP, ePerl, HTML::Embperl,
and HTML::Mason.
.IP "Modular vs Monolithic" 4
.IX Item "Modular vs Monolithic"
Some templating systems are not particularly configurable or extensible. 
.Sp
Others support various kinds of extensions, including Template::Toolkit, HTML::Mason and Text::MicroMason.
.IP "Interpreted vs. Compiled" 4
.IX Item "Interpreted vs. Compiled"
Some templating systems repeatedly parse the template from scratch every time it is used.
.Sp
Others parse the template into an intermediate data structure and then iterate over that each time the template is used.
.Sp
Others convert the template into equivalent Perl source code which can be compiled into a directly-executable subroutine and used repeatedly, including HTML::Mason and Text::MicroMason.
.SH "EMULATED MODULES"
.IX Header "EMULATED MODULES"
.Sh "Apache::ASP"
.IX Subsection "Apache::ASP"
For an emulation for Apache::ASP, 
see Text::MicroMason::ServerPages.
.Sh "Embperl"
.IX Subsection "Embperl"
For an emulation for Embperl, 
see Text::MicroMason::Embperl.
.Sh "HTML::Template"
.IX Subsection "HTML::Template"
For an emulation for HTML::Template, 
see Text::MicroMason::HTMLTemplate.
.PP
See also HTML::Template::Compiled.
.Sh "HTML::Mason"
.IX Subsection "HTML::Mason"
For an emulation for HTML::Mason, 
see Text::MicroMason::HTMLMason.
.PP
(If you've already got HTML::Mason installed, configured, and loaded
into your process, you're probably better off using it rather than
this package. HTML::Mason's \f(CW\*(C`$interp\->make_component()\*(C'\fR method
allows you to parse a text string without saving it to disk first.)
.Sh "\s-1PLP\s0"
.IX Subsection "PLP"
For an emulation for \s-1PLP\s0, 
see Text::MicroMason::PLP.
.Sh "Text::Template"
.IX Subsection "Text::Template"
For an emulation for Text::Template, 
see Text::MicroMason::TextTemplate.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For distribution, installation, support, copyright and license 
information, see Text::MicroMason::Docs::ReadMe.
