.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MicroMason 3"
.TH MicroMason 3 "2009-11-17" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Text::MicroMason \- Simple and Extensible Templating
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Mason syntax provides several ways to mix Perl into a text template:
.PP
.Vb 12
\&    <%args>
\&      $name
\&    </%args>
\&    % if ( $name eq \(aqDave\(aq ) {
\&      I\(aqm sorry <% $name %>, I\(aqm afraid I can\(aqt do that right now.
\&    % } else {
\&      <%perl>
\&        my $hour = (localtime)[2];
\&        my $daypart = ( $hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&      </%perl>
\&      Good <% $daypart %>, <% $name %>!
\&    % }
.Ve
.PP
Create a MicroMason object to interpret the templates:
.PP
.Vb 2
\&    use Text::MicroMason;
\&    $mason = Text::MicroMason\->new();
.Ve
.PP
Use the compile method to convert templates into a subroutines:
.PP
.Vb 2
\&    $coderef = $mason\->compile( text=>$template );
\&    print $coderef\->(\(aqname\(aq=>\(aqAlice\(aq);
.Ve
.PP
Or use the execute method to parse and evalute in one call:
.PP
.Vb 1
\&    print $mason\->execute( text=>$template, \(aqname\(aq=>\(aqBob\(aq );
.Ve
.PP
Templates stored in files can be run directly or included in others:
.PP
.Vb 1
\&    print $mason\->execute( file=>"./greeting.msn", \(aqname\(aq=>\(aqCharles\(aq);
.Ve
.PP
For additional features, select mixin classes to add to your MicroMason object:
.PP
.Vb 1
\&    $mason = Text::MicroMason\->new( qw( \-CatchErrors \-Safe \-Filters ) );
.Ve
.PP
You can import various functions if you prefer to avoid method calls:
.PP
.Vb 1
\&    use Text::MicroMason::Functions qw( compile execute );
.Ve
.PP
.Vb 1
\&    print execute($template, \(aqname\(aq=>\(aqDave\(aq);
.Ve
.PP
.Vb 2
\&    $coderef = compile($template);
\&    print $coderef\->(\(aqname\(aq=>\(aqBob\(aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Text::MicroMason interpolates blocks of Perl code embedded into text
strings.
.PP
Each MicroMason object acts as a \*(L"template compiler,\*(R" which converts
templates from text-with-embedded-code formats into ready-to-execute
Perl subroutines.
.Sh "MicroMason Initialization"
.IX Subsection "MicroMason Initialization"
Use the \fInew()\fR method to create a Text::MicroMason object with the
appropriate mixins and attributes.
.PP
.Vb 1
\&  $mason = Text::MicroMason\->new( %attribs );
.Ve
.PP
You may pass attributes as key-value pairs to the \fInew()\fR method to save
various options for later use by the \fIcompile()\fR method.
.Sh "Template Compilation"
.IX Subsection "Template Compilation"
To compile a text template, pass it to the \fIcompile()\fR method to produce a
new Perl subroutine to be returned as a code reference:
.PP
.Vb 1
\&  $code_ref = $mason\->compile( $type => $source, %attribs );
.Ve
.PP
Any attributes provided to \fIcompile()\fR will temporarily override the
persistant options defined by \fInew()\fR, for that template only.
.PP
You can provide the template as a text string, a file name, or an open
file handle:
.PP
.Vb 5
\&  $code_ref = $mason\->compile( text => $template );
\&  $code_ref = $mason\->compile( text => \e$template );
\&  $code_ref = $mason\->compile( file => $filename );
\&  $code_ref = $mason\->compile( handle => $fh );
\&  $code_ref = $mason\->compile( handle => \e*FILE );
.Ve
.PP
Template files are just plain text files that contains the string to be
parsed. The files may have any name and extension you wish. The filename
specified can either be absolute or relative to the program's current
directory.
.Sh "Template Execution"
.IX Subsection "Template Execution"
To execute the template and obtain the output, call a compiled function:
.PP
.Vb 1
\&  $result = $code_ref\->( @arguments );
.Ve
.PP
(Note that the \f(CW$code_ref\fR\->() syntax is unavailable in older versions of
Perl; use the equivalent &$\fIcode_ref()\fR syntax instead.)
.PP
As a shortcut, the execute method compiles and runs the template one time:
.PP
.Vb 2
\&  $result = $mason\->execute( $type => $source, @arguments );
\&  $result = $mason\->execute( $type => $source, \e%attribs, @arguments );
.Ve
.Sh "Argument Passing"
.IX Subsection "Argument Passing"
You can pass arguments to a template subroutine using positional or
named arguments.
.PP
For positional arguments, pass the argument list and read from \f(CW@_\fR as usual:
.PP
.Vb 1
\&  $mason\->compile( text=>\(aqHello <% shift(@_) %>.\(aq )\->( \(aqDave\(aq );
.Ve
.PP
For named arguments, pass in a hash of key-value pairs to be made
accessible in an \f(CW%ARGS\fR hash within the template subroutine:
.PP
.Vb 1
\&  $mason\->compile( text=>\(aqHello <% $ARGS{name} %>.\(aq )\->( name=>\(aqDave\(aq );
.Ve
.PP
Additionally, you can use named arugments with the \f(CW%args\fR block syntax:
.PP
.Vb 1
\&  $mason\->compile( text=>\(aq%args>$label</%args>Hello <% $label %>.\(aq )\->( name=>\(aqDave\(aq );
.Ve
.Sh "Mixin Selection"
.IX Subsection "Mixin Selection"
Arguments passed to \fInew()\fR that begin with a dash will be added as mixin classes.
.PP
.Vb 1
\&  $mason = Text::MicroMason\->new( \-Mixin1, %attribs, \-Mixin2 );
.Ve
.PP
Every MicroMason object inherits from an abstract Base class and some
set of mixin classes. By combining mixins you can create subclasses with
the desired combination of features. See Text::MicroMason::Base for
documentation of the base class, including private methods and extension
mechanisms.
.PP
If you call the new method on Text::MicroMason, it automatically
includes the HTMLMason mixin, which provides the standard template
syntax. If you want to create an object without the default HTMLMason
functionality, call Text::MicroMason::Base\->\fInew()\fR instead.
.PP
Some mixins define the syntax for a particular template format. You will
generally need to select one, and only one, of the mixins listed in
\&\*(L"\s-1TEMPLATE\s0 \s-1SYNTAXES\s0\*(R".
.PP
Other mixins provide optional functionality. Those mixins may define
additional public methods, and may support or require values for various
additional attributes. For a list of such mixin classes, see \*(L"\s-1MIXIN\s0 \s-1FEATURES\s0\*(R".
.SH "TEMPLATE SYNTAXES"
.IX Header "TEMPLATE SYNTAXES"
Templates contain a mix of literal text to be output with some type of
markup syntax which specifies more complex behaviors.
.PP
The Text::MicroMason::HTMLMason mixin is selected by default. To enable
an alternative, pass its name to Text::MicroMason::Base\->new( \-
MixinName ).
.Sh "HTMLMason"
.IX Subsection "HTMLMason"
The HTMLMason mixin provides lexer and assembler methods that handle
most elements of HTML::Mason's template syntax.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-HTMLMason );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 3
\&    <%args>
\&      $name => \(aqGuest\(aq 
\&    </%args>
.Ve
.PP
.Vb 9
\&    % if ( $name eq \(aqDave\(aq ) {
\&      I\(aqm sorry <% $name %>, I\(aqm afraid I can\(aqt do that right now.
\&    % } else {
\&      <%perl>
\&        my $hour = (localtime)[2];
\&        my $daypart = ( $hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&      </%perl>
\&      Good <% $daypart %>, <% $name %>!
\&    % }
.Ve
.PP
.Vb 1
\&    <& "includes/standard_footer.msn" &>
.Ve
.PP
.Vb 3
\&    <%doc>
\&      Here\(aqs a private developr comment describing this template. 
\&    </%doc>
.Ve
.PP
For a definition of the template syntax, see Text::MicroMason::HTMLMason.
.Sh "DoubleQuote"
.IX Subsection "DoubleQuote"
The DoubleQuote mixin uses Perl's double-quoting interpolation as a
minimalist syntax for templating.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-DoubleQuote );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 4
\&    ${ $::hour = (localtime)[2];
\&      $::daypart = ( $::hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&    \e\(aq\(aq }
\&    Good $::daypart, $ARGS{name}!
.Ve
.PP
For more information see Text::MicroMason::DoubleQuote.
.Sh "Embperl"
.IX Subsection "Embperl"
The Embperl mixin support a template syntax similar to that used by the
HTML::Embperl module.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-Embperl );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 10
\&    [\- my $name = $ARGS{name}; \-]
\&    [$ if $name eq \(aqDave\(aq $]
\&      I\(aqm sorry [+ $name +], I\(aqm afraid I can\(aqt do that right now.
\&    [$ else $]
\&      [\- 
\&        my $hour = (localtime)[2];
\&        my $daypart = ( $hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&      \-]
\&      Good [+ $daypart +], [+ $name +]!
\&    [$ endif $]
.Ve
.PP
For more information see Text::MicroMason::Embperl.
.Sh "HTMLTemplate"
.IX Subsection "HTMLTemplate"
The HTMLTemplate mixin supports a syntax similar to that used by the
HTML::Template module.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-HTMLTemplate );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 9
\&    <TMPL_IF NAME="user_is_dave">
\&      I\(aqm sorry <TMPLVAR NAME="name">, I\(aqm afraid I can\(aqt do that right now.
\&    <TMPL_ELSE>
\&      <TMPL_IF NAME="daytime_is_morning">
\&        Good morning, <TMPLVAR NAME="name">!
\&      <TMPL_ELSE>
\&        Good afternoon, <TMPLVAR NAME="name">!
\&      </TMPL_IF>
\&    </TMPL_IF>
.Ve
.PP
For more information see Text::MicroMason::HTMLTemplate.
.Sh "ServerPages"
.IX Subsection "ServerPages"
The ServerPages mixin supports a syntax similar to that used by the
Apache::ASP module.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-ServerPages );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 9
\&    <% my $name = $ARGS{name};
\&      if ( $name eq \(aqDave\(aq ) {  %>
\&      I\(aqm sorry <%= $name %>, I\(aqm afraid I can\(aqt do that right now.
\&    <% } else { 
\&        my $hour = (localtime)[2];
\&        my $daypart = ( $hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&      %>
\&      Good <%= $daypart %>, <%= $name %>!
\&    <% } %>
.Ve
.PP
For more information see Text::MicroMason::ServerPages.
.Sh "Sprintf"
.IX Subsection "Sprintf"
The Sprintf mixin uses Perl's sprintf formatting syntax for templating.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-Sprintf );
\&  my $output = $mason\->execute( text => $template, \(aqmorning\(aq, \(aqBob\(aq );
.Ve
.PP
.Vb 1
\&    Good %s, %s!
.Ve
.PP
For more information see Text::MicroMason::Sprintf.
.Sh "TextTemplate"
.IX Subsection "TextTemplate"
The TextTemplate mixin supports a syntax similar to that used by the
Text::Template module.
.PP
.Vb 2
\&  my $mason = Text::MicroMason::Base\->new( \-TextTemplate );
\&  my $output = $mason\->execute( text => $template, name => \(aqBob\(aq );
.Ve
.PP
.Vb 4
\&    { $hour = (localtime)[2];
\&      $daypart = ( $hour > 11 ) ? \(aqafternoon\(aq : \(aqmorning\(aq; 
\&    \(aq\(aq }
\&    Good { $daypart }, { $name }!
.Ve
.PP
For more information see Text::MicroMason::TextTemplate.
.SH "MIXIN FEATURES"
.IX Header "MIXIN FEATURES"
The following mixin classes can be layered on to your MicroMason object
to provide additional functionality.
.PP
To add a mixin's functionality, pass it's name with a dash to the \fInew()\fR method:
.PP
.Vb 1
\&  $mason = Text::MicroMason\->new( \-CatchErrors, \-PostProcess );
.Ve
.Sh "AllowGlobals"
.IX Subsection "AllowGlobals"
Enables access to a set of package variables to be shared with templates. 
.PP
For details see Text::MicroMason::AllowGlobals.
.Sh "CatchErrors"
.IX Subsection "CatchErrors"
Both compilation and run-time errors in your template are handled as
fatal exceptions. To prevent a template error from ending your program,
enclose it in an eval block:
.PP
.Vb 6
\&  my $result = eval { $mason\->execute( text => $template ) };
\&  if ( $@ ) {
\&    print "Unable to execute template: $@";
\&  } else {
\&    print $result;
\&  }
.Ve
.PP
To transparently add this functionality to your MicroMason object, see
Text::MicroMason::CatchErrors.
.Sh "CompileCache"
.IX Subsection "CompileCache"
Calling execute repeatedly will be slower than compiling once and
calling the template function repeatedly, unless you enable
compilation caching.
.PP
For details see Text::MicroMason::CompileCache.
.Sh "Debug"
.IX Subsection "Debug"
When trying to debug a template problem, it can be helpful to watch the
internal processes of template compilation. This mixin adds controllable
warning messages that show the intermediate parse information.
.PP
For details see Text::MicroMason::Debug.
.Sh "LineNumbers"
.IX Subsection "LineNumbers"
Provide better line numbers when compilation fails, at the cost of
potentially slower compilation and execution.
.PP
For details see Text::MicroMason::LineNumbers.
.Sh "ExecuteCache"
.IX Subsection "ExecuteCache"
Each time you execute the template all of the logic will be re\-
evaluated, unless you enable execution caching, which stores the output
of each template for each given set of arguments.
.PP
For details see Text::MicroMason::ExecuteCache.
.Sh "Filters"
.IX Subsection "Filters"
HTML::Mason provides an expression filtering mechanism which is
typically used for applying \s-1HTML\s0 and \s-1URL\s0 escaping functions to output.
.PP
.Vb 1
\&  Text::MicroMason\->new(\-Filters)\->compile( text => $template );
.Ve
.PP
.Vb 1
\&  <p> Hello <% $name |h %>!
.Ve
.PP
The Filters mixin provides this capability for Text::MicroMason
templates. To select it, add its name to your Mason initialization call:
.PP
.Vb 1
\&  my $mason = Text::MicroMason\->new( \-Filters );
.Ve
.PP
Output expressions may then be followed by \*(L"|h\*(R" or \*(L"|u\*(R" escapes; for
example this line would convert any ampersands in the output to the
equivalent \s-1HTML\s0 entity:
.PP
.Vb 1
\&  Welcome to <% $company_name |h %>
.Ve
.PP
For more information see Text::MicroMason::Filters.
.Sh "PassVariables"
.IX Subsection "PassVariables"
Allows you to pass arguments to templates as variables instead of the
basic argument list.
.PP
For details see Text::MicroMason::PostProcess.
.Sh "PostProcess"
.IX Subsection "PostProcess"
Allows you to specify one or more functions through which all template
output should be passed before it is returned.
.PP
For details see Text::MicroMason::PostProcess.
.Sh "Safe"
.IX Subsection "Safe"
By default, the code embedded in a template has accss to all of the
capabilities of your Perl process, and could potentially perform
dangerous activities such as accessing or modifying files and starting
other programs.
.PP
If you need to execute untrusted templates, use the Safe module,
which can restrict the operations and data structures that template
code can access.
.PP
To add this functionality to your MicroMason object, see
Text::MicroMason::Safe.
.Sh "TemplateDir"
.IX Subsection "TemplateDir"
The filenames passed to the \fIcompile()\fR or \fIexecute()\fR methods can be looked
up relative to a base directory path or the current template file.
.PP
To add this functionality to your MicroMason object, see
Text::MicroMason::TemplateDir.
.Sh "TemplatePath"
.IX Subsection "TemplatePath"
The filenames passed to the \fIcompile()\fR or \fIexecute()\fR methods are looked up
relative to a list of multiple base directory paths, in order. It tries
as hard as possible to maintain compatibility with caching and <& &>
template includes.
.PP
To add this functionality to your MicroMason object, see
Text::MicroMason::TemplatePath.
.SH "OTHER INTERFACES"
.IX Header "OTHER INTERFACES"
.Sh "Function Exporter"
.IX Subsection "Function Exporter"
Importable functions are provided for users who prefer a procedural interface. 
.PP
The supported functions are listed in Text::MicroMason::Functions.
(For backwards compatibility, those functions can also be imported from
the main Text::MicroMason package.)
.Sh "Template Frameworks"
.IX Subsection "Template Frameworks"
Adaptor modules are available to use MicroMason from within other frameworks. 
For more information, see Any::Template::Backend::Text::MicroMason and
Catalyst::View::MicroMason.
.Sh "Inline"
.IX Subsection "Inline"
MicroMason templates can be embbeded within your source code using Inline. 
For more information, see Inline::Mason.
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
Text::MicroMason croaks on error, with an appropriate error string. Some
commonly occurring error messages are described below (where \f(CW%s\fR
indicates variable message text). See also the pod for each mixin class,
for additional exception strings that may be thrown.
.IP "\(bu" 4
MicroMason parsing halted at \f(CW%s\fR
.Sp
Indicates that the parser was unable to finish tokenising the source
text. Generally this means that there is a bug somewhere in the regular
expressions used by \fIlex()\fR.
.Sp
(If you encounter this error, please feel free to file a bug report or
send an example of the error to the author using the addresses below,
and I'll attempt to correct it in a future release.)
.IP "\(bu" 4
MicroMason compilation failed: \f(CW%s\fR
.Sp
The template was parsed succesfully, but the Perl subroutine declaration
it was converted to failed to compile. This is generally a result of a
syntax error in one of the Perl expressions used within the template.
.IP "\(bu" 4
Error in template subroutine: \f(CW%s\fR
.Sp
Additional diagnostic for compilation errors, showing the text of the
subroutine which failed to compile.
.IP "\(bu" 4
Error in template file \f(CW%s\fR, interpreted as: \f(CW%s\fR
.Sp
Additional diagnostic for compilation errors in external files, showing
the filename and the text of the subroutine which failed to compile.
.IP "\(bu" 4
MicroMason execution failed: \f(CW%s\fR
.Sp
After parsing and compiling the template succesfully, the subroutine was
run and caused a fatal exception, generally because that some Perl code
used within the template caused \fIdie()\fR to be called (or an equivalent
function like croak or confess).
.IP "\(bu" 4
MicroMason: filename is missing or empty
.Sp
One of the compile or execute methods was called with an empty or
undefined filename, or one of the compile_file or execute_file methods
was called with no arguments.
.IP "\(bu" 4
MicroMason can't read from \f(CW%s:\fR \f(CW%s\fR
.Sp
One of the compile_file or execute_file functions was called but we were
unable to read the requested file, because the file path is incorrect or
we have insufficient priveleges to read that file.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For distribution, installation, support, copyright and license 
information, see Text::MicroMason::Docs::ReadMe.
