.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MixinFactory::ReadMe 3"
.TH MixinFactory::ReadMe 3 "2004-11-19" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Class::MixinFactory::ReadMe \- About the Mixin Class Factory
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package MyClass;
\&  use Class::MixinFactory \-hasafactory;
\&  sub new { ... }
\&  sub foo { return "Foo Bar" }
.Ve
.PP
.Vb 2
\&  package MyClass::Logging;
\&  sub foo { warn "Calling foo"; (shift)\->NEXT(\(aqfoo\(aq, @_) }
.Ve
.PP
.Vb 2
\&  package MyClass::UpperCase;
\&  sub foo { uc( (shift)\->NEXT(\(aqfoo\(aq, @_) ) }
.Ve
.PP
.Vb 1
\&  package main;
.Ve
.PP
.Vb 1
\&  my $class = MyClass\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
.Ve
.PP
.Vb 2
\&  print $class\->new()\->foo(); 
\&  # Calls MyClass::Logging::foo, MyClass::UpperCase::foo, MyClass::foo
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This distribution facilitates the run-time generation of classes which inherit from a base class and some optional selection of mixin classes. 
.PP
A factory is provided to generate the mixed classes with multiple inheritance. 
A \s-1NEXT\s0 method allows method redispatch up the inheritance chain.
.SH "MOTIVATION"
.IX Header "MOTIVATION"
.Sh "The Challenge"
.IX Subsection "The Challenge"
When developing an object class that will be used by different people for different purposes, I find myself drawn to solutions in which a minimal base class provides the shared behavior they all need, and a collection of subclasses provides layers of additional functionality.
.PP
For example, consider a text templating framework, which might be separated into several elements:
.IP "\(bu" 4
a base class, which provides methods to convert marked-up text into runnable code,
.IP "\(bu" 4
an extension which enhances security by runing the code in a Safe compartment,
.IP "\(bu" 4
an extension which feeds output through an HTML-escaping filter, and
.IP "\(bu" 4
an extension which records internal profiling data for benchmarking purposes.
.PP
(See Text::MicroMason for an example of this design.)
.Sh "A Bad Approach"
.IX Subsection "A Bad Approach"
A naive implementation of this might use a subclass for each behaviour, and look like the following:
.PP
.Vb 9
\&                    +\-\-\-\-\-\-\-\-\-+
\&                    |   Base  |
\&                    +\-\-\-\-\-\-\-\-\-+
\&                         |
\&       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&       v                 v                 v
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
\&  |Benchmark|       |  Filter |       |   Safe  | @ISA=qw(Base)
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
.Ve
.PP
The well-known problem with this implementation appears when you want to combine several features:
.PP
.Vb 15
\&                    +\-\-\-\-\-\-\-\-\-+
\&                    |   Base  |
\&                    +\-\-\-\-\-\-\-\-\-+
\&                         |
\&       +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&       v                 v                 v
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
\&  |Benchmark|       |  Filter |       |   Safe  | @ISA=qw(Base)
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
\&                         |                 |
\&                         +\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-+
\&                                  v
\&                           +\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&                           | Safe_Filter | @ISA=qw(Filter Safe)
\&                           +\-\-\-\-\-\-\-\-\-\-\-\-\-+
.Ve
.PP
This is the dreaded \*(L"diamond inheritance\*(R" problem: if Base provides a \fIcompile()\fR method, which Filter and Safe each override to perform additional actions before or after calling \fISUPER::compile()\fR, how can we ensure they are all called in the correct sequence?
.Sh "A Good Approach"
.IX Subsection "A Good Approach"
The standard software engineering solution is to replace the use of inheritance with decomposition into several different classes of objects, which then cooperate through decoration and delegation; for example, using separate classes for a resolver, a lexer, a parser, a compiler, and an output channel. (See HTML::Mason for an example of this design.) 
.PP
Indeed, composition is an underutilized design technique, and there are many times when inheritance is not the best tool to use. But of course, in Perl there's more than one way to solve this problem, one of which is facilitated by this distribution.
.Sh "A Different Approach"
.IX Subsection "A Different Approach"
We can rearrange our class hierarchy to avoid diamond inheritance by using a base and a collection of mixin classes, which don't directly inherit from the base class:
.PP
.Vb 9
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
\&  |Benchmark|       |  Filter |       |   Safe  |       |   Base  | 
\&  +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+       +\-\-\-\-\-\-\-\-\-+
\&                         |                 |                 |
\&                         +\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&                                           v
\&                                    +\-\-\-\-\-\-\-\-\-\-\-\-\-+
\&                                    | Safe_Filter | @ISA=qw(Filter 
\&                                    +\-\-\-\-\-\-\-\-\-\-\-\-\-+     Safe Base)
.Ve
.PP
However, in this condition our mixin classes can't call \s-1SUPER\s0 methods at all! Instead, another redispatch mechanism is needed, one that is able to back-track through the inheritance tree and explore other branches. (See \s-1NEXT\s0 for such an implementation.)
.PP
The order in which mixins are stacked is significant, so the caller does need to have some understanding of how their behaviors interact. For example, you'd typically want to ensure that the Benchmarking mixin was the first in the chain, so that it could time everything later in the sequence.
.Sh "This Distribution"
.IX Subsection "This Distribution"
The Class::MixinFactory distribution provides serveral elements to facilitate tihs kind of dynamic mixin architecture. The top level package is just a facade that loads the other necessary classes and provides a few import options for compile-time convenience. (See Class::MixinFactory.)
.PP
To generate an object with some combination of mixins, you first use a mixin factory to generate a mixed class. If a class with that combination of classes has already been created, it is reused. You can add a factory method to your base class, create a separate factory object, or inherit to produce a factory class. (See Class::MixinFactory::Factory.)
.PP
To allow mixin classes to redispatch to subsequent classes, all mixed classes also inherit from a class which provides a \s-1\fINEXT\s0()\fR method. (If you would prefer, your mixin class can alternately use the \s-1AUTOLOAD\s0 solution provided by the \s-1NEXT::ACTUAL\s0 module from \s-1CPAN\s0, or any other equivalent re-dispatch mechanism.) (See Class::MixinFactory::NEXT.)
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
There are number of other modules on \s-1CPAN\s0 that also support mixins, method importing, or run-time multiple inheritance, while others don't use mixins but are addressing a similar area of concern.
.IP "\(bu" 4
The mixin, Class::Mixin, and Spiffy modules
support mixin classes but don't have a configurable factory object or support
run-time mixin selection.
.IP "\(bu" 4
The Class::Mix and Class::Mutator
modules provide run-time class generation with multiple inheritance, but 
don't provide a configurable factory object or a redispatch technique.
.IP "\(bu" 4
The Class::Factory module has a factory interface, but doesn't support multiple inheritance.
.IP "\(bu" 4
The \s-1NEXT\s0 module provides a backtracking equivalent to \s-1SUPER\s0 similar to the \s-1NEXT\s0 method included here, but uses \s-1AUTOLOAD\s0 rather than a universal method.
.IP "\(bu" 4
The Class::Delegate and other modules support decoration to address this problem via decomposition.
.IP "\(bu" 4
The Class::Role, Class::Roles and Class::Trait modules support composing shared behaviors into your class.
.SH "VERSION"
.IX Header "VERSION"
This is version 0.92. 
.PP
Elements of the interface remain open to change.
.SH "BUGS"
.IX Header "BUGS"
This module is new and relatively untested. 
.PP
Please report any problems you encounter to the author at the below address.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
This module should work with any version of Perl 5, without platform
dependencies or additional modules beyond the core distribution.
.PP
You should be able to install this module using the \s-1CPAN\s0 shell interface:
.PP
.Vb 1
\&  perl \-MCPAN \-e \(aqinstall Class::MixinFactory\(aq
.Ve
.PP
Alternately, you may retrieve this package from \s-1CPAN\s0 (\f(CW\*(C`http://search.cpan.org/~evo/\*(C'\fR) or from the author's site (\f(CW\*(C`http://www.evoscript.org/Class\-MixinFactory\*(C'\fR).
.PP
After downloading the distribution, follow the normal procedure to unpack and install it, using the commands shown below or their local equivalents on your system:
.PP
.Vb 4
\&  tar xzf Class\-MixinFactory\-*.tar.gz
\&  cd Class\-MixinFactory\-*
\&  perl Makefile.PL
\&  make test && sudo make install
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
If you have questions or feedback about this module, please feel
free to contact the author at the below address. Although there is
no formal support program, I do attempt to answer email promptly. 
.PP
I would be particularly interested in any suggestions towards
improving the documentation, correcting any Perl-version or platform
dependencies, as well as general feedback and suggested additions.
.PP
Bug reports that contain a failing test case are greatly appreciated,
and suggested patches will be promptly considered for inclusion in
future releases.
.PP
To report bugs via the \s-1CPAN\s0 web tracking system, go to 
\&\f(CW\*(C`http://rt.cpan.org/NoAuth/Bugs.html?Dist=Class\-MixinFactory\*(C'\fR or send mail 
to \f(CW\*(C`Dist=Class\-MixinFactory#rt.cpan.org\*(C'\fR, replacing \f(CW\*(C`#\*(C'\fR with \f(CW\*(C`@\*(C'\fR.
.PP
If you've found this module useful or have feedback about your
experience with it, consider sharing your opinion with other Perl users
by posting your comment to \s-1CPAN\s0's ratings system
(\f(CW\*(C`http://cpanratings.perl.org/rate/?distribution=Class\-MixinFactory\*(C'\fR).
.PP
For more general discussion, you may wish to post a message on PerlMonks
(\f(CW\*(C`http://perlmonks.org/?node=Seekers%20of%20Perl%20Wisdom\*(C'\fR) or on the
comp.lang.perl.misc newsgroup
(\f(CW\*(C`http://groups.google.com/groups?group=comp.lang.perl.misc\*(C'\fR).
.SH "AUTHOR"
.IX Header "AUTHOR"
Developed by Matthew Simon Cavalletto at Evolution Softworks.  You may
contact the author directly at \f(CW\*(C`evo#cpan.org\*(C'\fR or
\&\f(CW\*(C`simonm#cavalletto.org\*(C'\fR, replacing \f(CW\*(C`#\*(C'\fR with \f(CW\*(C`@\*(C'\fR.
.PP
Custom development and technical consulting are available at
\&\f(CW\*(C`www.evolutionsoftworks.com\*(C'\fR. More free Perl software is available at
\&\f(CW\*(C`www.evoscript.org\*(C'\fR.
.SH "THANKS"
.IX Header "THANKS"
My sincere thanks to the Perl Monks community for their feedback on earlier versions of this commentary.
.PP
.Vb 2
\&  http://perlmonks.org/index.pl?node_id=398061
\&  http://perlmonks.org/index.pl?node_id=399040
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2004 Matthew Simon Cavalletto. 
.PP
You may use, modify, and distribute this software under the same terms as Perl.
