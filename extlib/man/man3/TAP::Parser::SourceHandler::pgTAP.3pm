.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::SourceHandler::pgTAP 3"
.TH TAP::Parser::SourceHandler::pgTAP 3 "2010-01-30" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
TAP::Parser::SourceHandler::pgTAP \- Stream TAP from pgTAP test scripts
.SH "VERSION"
.IX Header "VERSION"
Version 3.21
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In \fIBuild.PL\fR for your application with pgTAP tests in \fIt/*.pg\fR:
.PP
.Vb 19
\&  Module::Build\->new(
\&      module_name        => \(aqMyApp\(aq,
\&      test_file_exts     => [qw(.t .pg)],
\&      use_tap_harness    => 1,
\&      tap_harness_args   => {
\&          sources => {
\&              Perl  => undef,
\&              pgTAP => {
\&                  dbname => \(aqtry\(aq,
\&                  username => \(aqpostgres\(aq,
\&                  suffix => \(aq.pg\(aq,
\&              },
\&          }
\&      },
\&      build_requires     => {
\&          \(aqModule::Build\(aq                      => \(aq0.30\(aq,
\&          \(aqTAP::Parser::SourceHandler::pgTAP\(aq => \(aq3.19\(aq,
\&      },
\&  )\->create_build_script;
.Ve
.PP
If you're using \f(CW\*(C`prove\*(C'\fR:
.PP
.Vb 4
\&  prove \-\-source Perl \e
\&        \-\-source pgTAP \-\-pgtap\-option dbname=try \e
\&                       \-\-pgtap\-option username=postgres \e
\&                       \-\-pgtap\-option suffix=.pg
.Ve
.PP
Direct use:
.PP
.Vb 2
\&  use TAP::Parser::Source;
\&  use TAP::Parser::SourceHandler::pgTAP;
.Ve
.PP
.Vb 7
\&  my $source = TAP::Parser::Source\->new\->raw(\e\(aqmytest.pg\(aq);
\&  $source\->config({ pgTAP => {
\&      dbname   => \(aqtesting\(aq,
\&      username => \(aqpostgres\(aq,
\&      suffix   => \(aq.pg\(aq,
\&  });
\&  $source\->assemble_meta;
.Ve
.PP
.Vb 3
\&  my $class = \(aqTAP::Parser::SourceHandler::pgTAP\(aq;
\&  my $vote  = $class\->can_handle( $source );
\&  my $iter  = $class\->make_iterator( $source );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This source handler executes pgTAP tests. It does two things:
.IP "1." 4
Looks at the TAP::Parser::Source passed to it to determine whether or not
the source in question is in fact a pgTAP test (\*(L"can_handle\*(R").
.IP "2." 4
Creates an iterator that will call \f(CW\*(C`psql\*(C'\fR to run the pgTAP tests
(\*(L"make_iterator\*(R").
.PP
Unless you're writing a plugin or subclassing TAP::Parser, you probably
won't need to use this module directly.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`can_handle\*(C'\fI\fR
.IX Subsection "can_handle"
.PP
.Vb 1
\&  my $vote = $class\->can_handle( $source );
.Ve
.PP
Looks at the source to determine whether or not it's a pgTAP test file and
returns a score for how likely it is in fact a pgTAP test file. The scores are
as follows:
.PP
.Vb 4
\&  1    if it has a suffix equal to that in the "suffix" config
\&  1    if its suffix is ".pg"
\&  0.8  if its suffix is ".sql"
\&  0.75 if its suffix is ".s"
.Ve
.PP
The latter two scores are subject to change, so try to name your pgTAP tests
ending in \*(L".pg\*(R" or specify a suffix in the configuration to be sure.
.PP
\fI\f(CI\*(C`make_iterator\*(C'\fI\fR
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $class\->make_iterator( $source );
.Ve
.PP
Returns a new TAP::Parser::Iterator::Process for the source. \f(CW\*(C`$source\->raw\*(C'\fR must be either a file name or a scalar reference to the file
name.
.PP
The pgTAP tests are run by executing \f(CW\*(C`psql\*(C'\fR, the PostgreSQL command-line
utility. A number of arguments are passed to it, many of which you can effect
by setting up the source source configuration. The configuration must be a
hash reference, and supports the following keys:
.ie n .IP """psql""" 4
.el .IP "\f(CWpsql\fR" 4
.IX Item "psql"
The path to the \f(CW\*(C`psql\*(C'\fR command. Defaults to simply \*(L"psql\*(R", which should work
well enough if it's in your path.
.ie n .IP """dbname""" 4
.el .IP "\f(CWdbname\fR" 4
.IX Item "dbname"
The database to which to connect to run the tests. Defaults to the value of
the \f(CW$PGDATABASE\fR environment variable or, if not set, to the system
username.
.ie n .IP """username""" 4
.el .IP "\f(CWusername\fR" 4
.IX Item "username"
The PostgreSQL username to use to connect to PostgreSQL. If not specified, no
username will be used, in which case \f(CW\*(C`psql\*(C'\fR will fall back on either the
\&\f(CW$PGUSER\fR environment variable or, if not set, the system username.
.ie n .IP """host""" 4
.el .IP "\f(CWhost\fR" 4
.IX Item "host"
Specifies the host name of the machine to which to connect to the PostgreSQL
server. If the value begins with a slash, it is used as the directory for the
Unix-domain socket. Defaults to the value of the \f(CW$PGDATABASE\fR environment
variable or, if not set, the local host.
.ie n .IP """port""" 4
.el .IP "\f(CWport\fR" 4
.IX Item "port"
Specifies the \s-1TCP\s0 port or the local Unix-domain socket file extension on which
the server is listening for connections. Defaults to the value of the
\&\f(CW$PGPORT\fR environment variable or, if not set, to the port specified at the
time \f(CW\*(C`psql\*(C'\fR was compiled, usually 5432.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::IteratorFactory,
TAP::Parser::SourceHandler,
TAP::Parser::SourceHandler::Executable,
TAP::Parser::SourceHandler::Perl,
TAP::Parser::SourceHandler::File,
TAP::Parser::SourceHandler::Handle,
TAP::Parser::SourceHandler::RawTAP
.SH "AUTHOR"
.IX Header "AUTHOR"
David E. Wheeler <dwheeler@cpan.org>
