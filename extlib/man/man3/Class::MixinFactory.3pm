.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MixinFactory 3"
.TH MixinFactory 3 "2004-11-29" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Class::MixinFactory \- Class Factory with Selection of Mixins
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package MyClass;
\&  use Class::MixinFactory \-hasafactory;
\&  sub new { ... }
\&  sub foo { return "Foo Bar" }
.Ve
.PP
.Vb 2
\&  package MyClass::Logging;
\&  sub foo { warn "Calling foo"; (shift)\->NEXT(\(aqfoo\(aq, @_) }
.Ve
.PP
.Vb 2
\&  package MyClass::UpperCase;
\&  sub foo { uc( (shift)\->NEXT(\(aqfoo\(aq, @_) ) }
.Ve
.PP
.Vb 1
\&  package main;
.Ve
.PP
.Vb 3
\&  my $class = MyClass\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
\&  print $class\->new()\->foo(); 
\&  # Calls MyClass::Logging::foo, MyClass::UpperCase::foo, MyClass::foo
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This distribution facilitates the run-time generation of classes which inherit from a base class and some optional selection of mixin classes. 
.PP
A factory is provided to generate the mixed classes with multiple inheritance. 
A \s-1NEXT\s0 method allows method redispatch up the inheritance chain.
.SH "USAGE"
.IX Header "USAGE"
The Class::MixinFactory package is just a facade that loads the necessary classes and provides a few import options for compile-time convenience.
.Sh "Factory Interface"
.IX Subsection "Factory Interface"
To generate an object with some combination of mixins, you first pass the names of the mixin classes to a class factory which will generate a mixed class. (Or return the name of the already generated class, if there has been a previous request with the same combination of mixins.) 
.PP
You can add a factory method to your base class, create a separate factory object, or inherit to produce a factory class.
.IP "Factory Method" 4
.IX Item "Factory Method"
To add a factory method to a base class, inherit from the Class::MixinFactory::HasAFactory class, or use the \f(CW\*(C`\-hasafactory\*(C'\fR import option:
.Sp
.Vb 2
\&  package MyClass;
\&  use Class::MixinFactory \-hasafactory;
.Ve
.Sp
.Vb 3
\&  package main;
\&  my $class = MyClass\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
\&  print $class\->new()\->foo();
.Ve
.IP "Factory Class" 4
.IX Item "Factory Class"
To create a new class which will act as a factory for another base class, inherit from the Class::MixinFactory::Factory class, or use the \f(CW\*(C`\-isafactory\*(C'\fR import option:
.Sp
.Vb 3
\&  package MyClass::Factory;
\&  use Class::MixinFactory \-isafactory;
\&  MyClass::Factory\->base_class( "MyClass" );
.Ve
.Sp
.Vb 3
\&  package main;
\&  my $class = MyClass::Factory\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
\&  print $class\->new()\->foo();
.Ve
.IP "Factory Object" 4
.IX Item "Factory Object"
To create an object which will act as a factory, create a Class::MixinFactory::Factory instance by calling the \fInew()\fR method:
.Sp
.Vb 3
\&  use Class::MixinFactory;
\&  my $factory = Class::MixinFactory\->new();
\&  $factory\->base_class( "MyClass" );
.Ve
.Sp
.Vb 2
\&  my $class = $factory\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
\&  print $class\->new()\->foo();
.Ve
.Sh "Inheriting from a Mixed Class"
.IX Subsection "Inheriting from a Mixed Class"
.IP "Inheriting with a Factory Method or Factory Object" 4
.IX Item "Inheriting with a Factory Method or Factory Object"
A subclass can inherit from a mixed class:
.Sp
.Vb 3
\&  package MyClass::CustomWidget;
\&  @ISA = MyClass\->class( \(aqLogging\(aq, \(aqUpperCase\(aq );
\&  sub foo { local $_ = (shift)\->NEXT(\(aqfoo\(aq, @_); tr[a\-z][z\-a]; $_ }
.Ve
.Sp
.Vb 2
\&  package main;
\&  print MyClass::CustomWidget\->new()\->foo();
.Ve
.IP "Inheriting with a Factory Class" 4
.IX Item "Inheriting with a Factory Class"
A subclass can use a factory class to define its own inheritance:
.Sp
.Vb 4
\&  package MyClass::CustomWidget;
\&  use Class::MixinFactory \-isasubclass,
\&        MyClass::Factory => \(aqLogging\(aq, \(aqUpperCase\(aq;
\&  sub foo { local $_ = (shift)\->NEXT(\(aqfoo\(aq, @_); tr[a\-z][z\-a]; $_ }
.Ve
.Sp
.Vb 2
\&  package main;
\&  print MyClass::CustomWidget\->new()\->foo();
.Ve
.Sh "Configuring a Factory"
.IX Subsection "Configuring a Factory"
Factories support methods that control which classes they will use.
.PP
The base class will be inherited from by all mixed classes. 
.PP
.Vb 1
\&  $factory\->base_class( "HelloWorld" );
.Ve
.PP
The mixin prefix is prepended to the mixin names passed to the \fIclass()\fR method. Mixin names that contain a \*(L"::\*(R" are assumed to be fully qualified and are not changed. If empty, the base_class is used.
.PP
.Vb 1
\&  $factory\->mixin_prefix( \(aqHelloFeature\(aq );
.Ve
.PP
The mixed prefix is at the start of all generated class names. If empty, the base_class is used, or the factory's class name.
.PP
.Vb 1
\&  $factory\->mixed_prefix( \(aqHelloClass\(aq );
.Ve
.Sh "Writing a Mixin Class"
.IX Subsection "Writing a Mixin Class"
Writing a mixin class is almost the same as writing a subclass, except where methods need to redispatch to the base-class implementation. (The SUPER::method syntax will only search for classes that the mixin itself inherits from; to search back up the inheritance tree and explore other branches, another redispatch mechanism is needed.) 
.PP
A method named \s-1NEXT\s0 is provided to continue the search through to the next class which provides a given method. The order in which mixins are stacked is significant, so the caller should understand how their behaviors interact. (See Class::MixinFactory::NEXT.)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
For distribution, installation, support, copyright and license 
information, see Class::MixinFactory::ReadMe.
